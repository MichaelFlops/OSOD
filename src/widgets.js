// Generated by CoffeeScript 1.9.1
var Context, Histogram, Label, List, Plot, PlotSeries, Slider, Widget,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Context = (function() {
  function Context(output1, fn1) {
    this.output = output1;
    this.fn = fn1;
    this.initial = true;
    this.output.html('');
    this.widgets = [];
  }

  Context.prototype.ensureWidget = function(widgetClass, optArg) {
    var widget;
    if (this.initial) {
      widget = new widgetClass(optArg);
      this.widgets.push(widget);
      this.output.append(widget.el);
      this.output.append($('<br>'));
    } else if (this.i >= this.widgets.length) {
      throw new Exception('Number of widgets changed during update');
    }
    return this.widgets[this.i++];
  };

  Context.prototype.run = function() {
    var e, error;
    this.i = 0;
    App.ctx = this;
    try {
      return this.fn();
    } catch (_error) {
      e = _error;
      error = $('<p style="color:red;">');
      error.text(e.toString());
      this.output.append(error);
      throw e;
    } finally {
      App.ctx = null;
      this.initial = false;
      if (this.i !== this.widgets.length) {
        throw new Exception('Number of widgets changed during update');
      }
    }
  };

  Context.prototype.setSection = function(s) {
    this.output = s;
    if (this.initial) {
      return this.output.html('');
    }
  };

  return Context;

})();

Widget = (function() {
  function Widget() {}

  Widget.prototype.update = function() {
    return '';
  };

  return Widget;

})();

Slider = (function(superClass) {
  extend(Slider, superClass);

  function Slider(def1) {
    this.def = def1;
    this.initial = true;
    this.el = $('<input type="range"></input>').on('change', App.ctx.run.bind(App.ctx)).on('mousemove', _.debounce(App.ctx.run.bind(App.ctx), 100));
  }

  Slider.prototype.update = function(min, max, step) {
    this.el.attr('min', min).attr('max', max).attr('step', step);
    if (this.initial) {
      this.el.val(this.def);
      this.initial = false;
    }
    return +this.el.val();
  };

  return Slider;

})(Widget);

Label = (function(superClass) {
  extend(Label, superClass);

  function Label() {
    this.el = $('<pre></pre>');
  }

  Label.prototype.update = function(val) {
    return this.el.html(String(val));
  };

  return Label;

})(Widget);

List = (function(superClass) {
  extend(List, superClass);

  function List() {
    this.el = $('<table class="table table-bordered"> <tbody><tr></tr></tbody> </table>');
  }

  List.prototype.update = function(val) {
    var item, j, len, results, row;
    row = this.el.find('tr');
    row.html('');
    results = [];
    for (j = 0, len = val.length; j < len; j++) {
      item = val[j];
      results.push($('<td></td>').html(String(item)).appendTo(row));
    }
    return results;
  };

  return List;

})(Widget);

$.jqplot.config.enablePlugins = true;

Plot = (function(superClass) {
  extend(Plot, superClass);

  Plot.prototype.options = function() {
    return {};
  };

  function Plot() {
    this.el = $('<div class="plot"></div>');
  }

  Plot.prototype.update = function(points) {
    this.el.html('');
    return this.el.jqplot([points], this.options());
  };

  return Plot;

})(Widget);

PlotSeries = (function(superClass) {
  extend(PlotSeries, superClass);

  function PlotSeries() {
    return PlotSeries.__super__.constructor.apply(this, arguments);
  }

  PlotSeries.prototype.options = function() {
    return {
      axes: {
        xaxis: {
          min: 1,
          tickInterval: 1.0
        }
      }
    };
  };

  PlotSeries.prototype.update = function(series) {
    var i, y;
    return PlotSeries.__super__.update.call(this, (function() {
      var results;
      results = [];
      for (i in series) {
        y = series[i];
        results.push([(+i) + 1, y]);
      }
      return results;
    })());
  };

  return PlotSeries;

})(Plot);

Histogram = (function(superClass) {
  extend(Histogram, superClass);

  function Histogram() {
    return Histogram.__super__.constructor.apply(this, arguments);
  }

  Histogram.prototype.options = function() {
    return {
      seriesDefaults: {
        pointLabels: {
          show: true
        },
        renderer: $.jqplot.BarRenderer,
        rendererOptions: {
          fillToZero: true
        }
      },
      axes: {
        xaxis: {
          renderer: $.jqplot.CategoryAxisRenderer
        }
      }
    };
  };

  return Histogram;

})(PlotSeries);

window.slider = function(min, max, step, def) {
  if (min == null) {
    min = 0;
  }
  if (max == null) {
    max = 1.0;
  }
  if (step == null) {
    step = 0.1;
  }
  if (def === void 0) {
    def = min;
  }
  return App.ctx.ensureWidget(Slider, def).update(min, max, step);
};

window.print = function(val) {
  if (val == null) {
    val = '';
  }
  return App.ctx.ensureWidget(Label).update(val);
};

window.list = function(val) {
  if (val == null) {
    val = [];
  }
  return App.ctx.ensureWidget(List).update(val);
};

window.plot = function(val) {
  if (val == null) {
    val = [];
  }
  return App.ctx.ensureWidget(Plot).update(val);
};

window.plotseries = function(val) {
  if (val == null) {
    val = [];
  }
  return App.ctx.ensureWidget(PlotSeries).update(val);
};

window.histogram = function(val) {
  if (val == null) {
    val = [];
  }
  return App.ctx.ensureWidget(Histogram).update(val);
};

window.run = function(fn, output) {
  var ctx;
  if (output == null) {
    output = $('#output');
  }
  ctx = new Context(output, fn);
  return ctx.run();
};
