1,25c1,14
< // Generated by CoffeeScript 1.9.1
< var Context, Histogram, Label, List, Plot, PlotSeries, Slider, Widget,
<   extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
<   hasProp = {}.hasOwnProperty;
< 
< console.log('tesy');
< 
< Context = (function() {
<   function Context(output1, fn1) {
<     this.output = output1;
<     this.fn = fn1;
<     this.initial = true;
<     this.output.html('');
<     this.widgets = [];
<   }
< 
<   Context.prototype.ensureWidget = function(widgetClass, optArg) {
<     var widget;
<     if (this.initial) {
<       widget = new widgetClass(optArg);
<       this.widgets.push(widget);
<       this.output.append(widget.el);
<       this.output.append($('<br>'));
<     } else if (this.i >= this.widgets.length) {
<       throw new Exception('Number of widgets changed during update');
---
> (function() {
>   var Context, Histogram, Label, List, Plot, PlotSeries, Slider, Widget,
>     __hasProp = {}.hasOwnProperty,
>     __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
> 
>   console.log('tesy');
> 
>   Context = (function() {
>     function Context(output, fn) {
>       this.output = output;
>       this.fn = fn;
>       this.initial = true;
>       this.output.html('');
>       this.widgets = [];
27,28d15
<     return this.widgets[this.i++];
<   };
30,45c17,24
<   Context.prototype.run = function() {
<     var e, error;
<     this.i = 0;
<     App.ctx = this;
<     try {
<       return this.fn();
<     } catch (_error) {
<       e = _error;
<       error = $('<p style="color:red;">');
<       error.text(e.toString());
<       this.output.append(error);
<       throw e;
<     } finally {
<       App.ctx = null;
<       this.initial = false;
<       if (this.i !== this.widgets.length) {
---
>     Context.prototype.ensureWidget = function(widgetClass, optArg) {
>       var widget;
>       if (this.initial) {
>         widget = new widgetClass(optArg);
>         this.widgets.push(widget);
>         this.output.append(widget.el);
>         this.output.append($('<br>'));
>       } else if (this.i >= this.widgets.length) {
48,49c27,28
<     }
<   };
---
>       return this.widgets[this.i++];
>     };
51,56c30,49
<   Context.prototype.setSection = function(s) {
<     this.output = s;
<     if (this.initial) {
<       return this.output.html('');
<     }
<   };
---
>     Context.prototype.run = function() {
>       var e, error;
>       this.i = 0;
>       App.ctx = this;
>       try {
>         return this.fn();
>       } catch (_error) {
>         e = _error;
>         error = $('<p style="color:red;">');
>         error.text(e.toString());
>         this.output.append(error);
>         throw e;
>       } finally {
>         App.ctx = null;
>         this.initial = false;
>         if (this.i !== this.widgets.length) {
>           throw new Exception('Number of widgets changed during update');
>         }
>       }
>     };
58c51,56
<   return Context;
---
>     Context.prototype.setSection = function(s) {
>       this.output = s;
>       if (this.initial) {
>         return this.output.html('');
>       }
>     };
60c58
< })();
---
>     return Context;
62,63c60
< Widget = (function() {
<   function Widget() {}
---
>   })();
65,67c62,67
<   Widget.prototype.update = function() {
<     return '';
<   };
---
>   Widget = (function() {
>     function Widget() {}
> 
>     Widget.prototype.update = function() {
>       return '';
>     };
69c69
<   return Widget;
---
>     return Widget;
71c71
< })();
---
>   })();
73,74c73,74
< Slider = (function(superClass) {
<   extend(Slider, superClass);
---
>   Slider = (function(_super) {
>     __extends(Slider, _super);
76,86c76,79
<   function Slider(def1) {
<     this.def = def1;
<     this.initial = true;
<     this.el = $('<input type="range"></input>').on('change', App.ctx.run.bind(App.ctx)).on('mousemove', _.debounce(App.ctx.run.bind(App.ctx), 100));
<   }
< 
<   Slider.prototype.update = function(min, max, step) {
<     this.el.attr('min', min).attr('max', max).attr('step', step);
<     if (this.initial) {
<       this.el.val(this.def);
<       this.initial = false;
---
>     function Slider(def) {
>       this.def = def;
>       this.initial = true;
>       this.el = $('<input type="range"></input>').on('change', App.ctx.run.bind(App.ctx)).on('mousemove', _.debounce(App.ctx.run.bind(App.ctx), 100));
88,89d80
<     return +this.el.val();
<   };
91c82,91
<   return Slider;
---
>     Slider.prototype.update = function(min, max, step) {
>       this.el.attr('min', min).attr('max', max).attr('step', step);
>       if (this.initial) {
>         this.el.val(this.def);
>         this.initial = false;
>       }
>       return +this.el.val();
>     };
> 
>     return Slider;
93c93
< })(Widget);
---
>   })(Widget);
95,96c95,96
< Label = (function(superClass) {
<   extend(Label, superClass);
---
>   Label = (function(_super) {
>     __extends(Label, _super);
98,100c98,100
<   function Label() {
<     this.el = $('<pre></pre>');
<   }
---
>     function Label() {
>       this.el = $('<pre></pre>');
>     }
102,104c102,104
<   Label.prototype.update = function(val) {
<     return this.el.html(String(val));
<   };
---
>     Label.prototype.update = function(val) {
>       return this.el.html(String(val));
>     };
106c106
<   return Label;
---
>     return Label;
108c108
< })(Widget);
---
>   })(Widget);
110,111c110,111
< List = (function(superClass) {
<   extend(List, superClass);
---
>   List = (function(_super) {
>     __extends(List, _super);
113,124c113,114
<   function List() {
<     this.el = $('<table class="table table-bordered"> <tbody><tr></tr></tbody> </table>');
<   }
< 
<   List.prototype.update = function(val) {
<     var item, j, len, results, row;
<     row = this.el.find('tr');
<     row.html('');
<     results = [];
<     for (j = 0, len = val.length; j < len; j++) {
<       item = val[j];
<       results.push($('<td></td>').html(String(item)).appendTo(row));
---
>     function List() {
>       this.el = $('<table class="table table-bordered"> <tbody><tr></tr></tbody> </table>');
126,127d115
<     return results;
<   };
129c117,127
<   return List;
---
>     List.prototype.update = function(val) {
>       var item, row, _i, _len, _results;
>       row = this.el.find('tr');
>       row.html('');
>       _results = [];
>       for (_i = 0, _len = val.length; _i < _len; _i++) {
>         item = val[_i];
>         _results.push($('<td></td>').html(String(item)).appendTo(row));
>       }
>       return _results;
>     };
131c129
< })(Widget);
---
>     return List;
133c131
< $.jqplot.config.enablePlugins = true;
---
>   })(Widget);
135,136c133
< Plot = (function(superClass) {
<   extend(Plot, superClass);
---
>   $.jqplot.config.enablePlugins = true;
138,140c135,136
<   Plot.prototype.options = function() {
<     return {};
<   };
---
>   Plot = (function(_super) {
>     __extends(Plot, _super);
142,149c138,151
<   function Plot() {
<     this.el = $('<div class="plot"></div>');
<   }
< 
<   Plot.prototype.update = function(points) {
<     this.el.html('');
<     return this.el.jqplot([points], this.options());
<   };
---
>     Plot.prototype.options = function() {
>       return {};
>     };
> 
>     function Plot() {
>       this.el = $('<div class="plot"></div>');
>     }
> 
>     Plot.prototype.update = function(points) {
>       this.el.html('');
>       return this.el.jqplot([points], this.options());
>     };
> 
>     return Plot;
151c153
<   return Plot;
---
>   })(Widget);
153c155,156
< })(Widget);
---
>   PlotSeries = (function(_super) {
>     __extends(PlotSeries, _super);
155,156c158,160
< PlotSeries = (function(superClass) {
<   extend(PlotSeries, superClass);
---
>     function PlotSeries() {
>       return PlotSeries.__super__.constructor.apply(this, arguments);
>     }
158,167c162,168
<   function PlotSeries() {
<     return PlotSeries.__super__.constructor.apply(this, arguments);
<   }
< 
<   PlotSeries.prototype.options = function() {
<     return {
<       axes: {
<         xaxis: {
<           min: 1,
<           tickInterval: 1.0
---
>     PlotSeries.prototype.options = function() {
>       return {
>         axes: {
>           xaxis: {
>             min: 1,
>             tickInterval: 1.0
>           }
169c170
<       }
---
>       };
171d171
<   };
173,184c173,184
<   PlotSeries.prototype.update = function(series) {
<     var i, y;
<     return PlotSeries.__super__.update.call(this, (function() {
<       var results;
<       results = [];
<       for (i in series) {
<         y = series[i];
<         results.push([(+i) + 1, y]);
<       }
<       return results;
<     })());
<   };
---
>     PlotSeries.prototype.update = function(series) {
>       var i, y;
>       return PlotSeries.__super__.update.call(this, (function() {
>         var _results;
>         _results = [];
>         for (i in series) {
>           y = series[i];
>           _results.push([(+i) + 1, y]);
>         }
>         return _results;
>       })());
>     };
186c186
<   return PlotSeries;
---
>     return PlotSeries;
188c188
< })(Plot);
---
>   })(Plot);
190,191c190,191
< Histogram = (function(superClass) {
<   extend(Histogram, superClass);
---
>   Histogram = (function(_super) {
>     __extends(Histogram, _super);
193,201c193,206
<   function Histogram() {
<     return Histogram.__super__.constructor.apply(this, arguments);
<   }
< 
<   Histogram.prototype.options = function() {
<     return {
<       seriesDefaults: {
<         pointLabels: {
<           show: true
---
>     function Histogram() {
>       return Histogram.__super__.constructor.apply(this, arguments);
>     }
> 
>     Histogram.prototype.options = function() {
>       return {
>         seriesDefaults: {
>           pointLabels: {
>             show: true
>           },
>           renderer: $.jqplot.BarRenderer,
>           rendererOptions: {
>             fillToZero: true
>           }
203,205c208,211
<         renderer: $.jqplot.BarRenderer,
<         rendererOptions: {
<           fillToZero: true
---
>         axes: {
>           xaxis: {
>             renderer: $.jqplot.CategoryAxisRenderer
>           }
207,212c213
<       },
<       axes: {
<         xaxis: {
<           renderer: $.jqplot.CategoryAxisRenderer
<         }
<       }
---
>       };
213a215,233
> 
>     return Histogram;
> 
>   })(PlotSeries);
> 
>   window.slider = function(min, max, step, def) {
>     if (min == null) {
>       min = 0;
>     }
>     if (max == null) {
>       max = 1.0;
>     }
>     if (step == null) {
>       step = 0.1;
>     }
>     if (def === void 0) {
>       def = min;
>     }
>     return App.ctx.ensureWidget(Slider, def).update(min, max, step);
216c236,278
<   return Histogram;
---
>   window.print = function(val) {
>     if (val == null) {
>       val = '';
>     }
>     return App.ctx.ensureWidget(Label).update(val);
>   };
> 
>   window.list = function(val) {
>     if (val == null) {
>       val = [];
>     }
>     return App.ctx.ensureWidget(List).update(val);
>   };
> 
>   window.plot = function(val) {
>     if (val == null) {
>       val = [];
>     }
>     return App.ctx.ensureWidget(Plot).update(val);
>   };
> 
>   window.plotseries = function(val) {
>     if (val == null) {
>       val = [];
>     }
>     return App.ctx.ensureWidget(PlotSeries).update(val);
>   };
> 
>   window.histogram = function(val) {
>     if (val == null) {
>       val = [];
>     }
>     return App.ctx.ensureWidget(Histogram).update(val);
>   };
> 
>   window.run = function(fn, output) {
>     var ctx;
>     if (output == null) {
>       output = $('#output');
>     }
>     ctx = new Context(output, fn);
>     return ctx.run();
>   };
218c280
< })(PlotSeries);
---
> }).call(this);
220,278c282
< window.slider = function(min, max, step, def) {
<   if (min == null) {
<     min = 0;
<   }
<   if (max == null) {
<     max = 1.0;
<   }
<   if (step == null) {
<     step = 0.1;
<   }
<   if (def === void 0) {
<     def = min;
<   }
<   return App.ctx.ensureWidget(Slider, def).update(min, max, step);
< };
< 
< window.print = function(val) {
<   if (val == null) {
<     val = '';
<   }
<   return App.ctx.ensureWidget(Label).update(val);
< };
< 
< window.list = function(val) {
<   if (val == null) {
<     val = [];
<   }
<   return App.ctx.ensureWidget(List).update(val);
< };
< 
< window.plot = function(val) {
<   if (val == null) {
<     val = [];
<   }
<   return App.ctx.ensureWidget(Plot).update(val);
< };
< 
< window.plotseries = function(val) {
<   if (val == null) {
<     val = [];
<   }
<   return App.ctx.ensureWidget(PlotSeries).update(val);
< };
< 
< window.histogram = function(val) {
<   if (val == null) {
<     val = [];
<   }
<   return App.ctx.ensureWidget(Histogram).update(val);
< };
< 
< window.run = function(fn, output) {
<   var ctx;
<   if (output == null) {
<     output = $('#output');
<   }
<   ctx = new Context(output, fn);
<   return ctx.run();
< };
---
> //# sourceMappingURL=widgets.js.map
